#use-syntax(core, chipper)

defpackage CSR :
   import core
   import verse
   import chipper
   import Params
   import stdlib

public val CSR-N = UInt<2>(0)
public val CSR-W = UInt<2>(1)
public val CSR-S = UInt<2>(2)
public val CSR-C = UInt<2>(3)

public val CSR-STATUS = UInt<12>("0x50a")
public val CSR-HARTID = UInt<12>("0x50b")
public val CSR-TOHOST = UInt<12>("0x51e")

public defbundle HostIO :
  flip hid : UInt<1>
  tohost : UInt<instLen>
  status : UInt<instLen>

public defmodule CSR :
  input  cmd  : Bits<2>
  input  addr : Bits<12>
  input  src  : Bits<instLen>
  output host : HostIO
  output data : Bits<instLen>

  reg reg_tohost = UInt<32>(0)
  reg reg_status = UInt<32>(0)

  host.tohost := reg_tohost
  host.status := reg_status

  data := to-uint(mux-lookup(addr, UInt(0), [
    CSR-TOHOST => reg_tohost,
    CSR-STATUS => reg_status,
    CSR-HARTID => host.hid]))

  when cmd === CSR-W :
    when addr === CSR-TOHOST : reg_tohost := src 
    when addr === CSR-STATUS : reg_status := src 
  when (cmd === CSR-S) && (src !== UInt(0)) :
    when addr === CSR-TOHOST : reg_tohost := data | (UInt(1) << src)
    when addr === CSR-STATUS : reg_status := data | (UInt(1) << src)
  when (cmd === CSR-C) && (src !== UInt(0)) :
    when addr === CSR-TOHOST : reg_tohost := data & (UInt(0) << src)
    when addr === CSR-STATUS : reg_status := data & (UInt(0) << src)
