#use-syntax(core, chipper)

defpackage Datapath :
   import core
   import verse
   import chipper
   import stdlib
   import Params
   import ALU
   import BrCond
   import RegFile
   import ImmGen
   import Memory
   import CSR
   import Control
   import Instructions

public val PC_START = UInt("0x2000")

public defmodule Datapath :
  input  stall  : Bool
  input  ctrl   : ControlSignals
  output host   : HostIO
  output icache : CacheIO
  output dcache : CacheIO

  inst alu of ALU
  inst brCond  of BrCond
  inst regFile of RegFile
  inst immGen  of ImmGenWire

  ;; ***** Fetch / Execute Registers *****
  reg fe_inst = UInt<instLen>(0)
  reg fe_pc   : UInt

  ;; ***** Execute / Write Back Registers *****
  reg ew_inst = UInt<instLen>(0)
  reg ew_pc  : UInt
  reg ew_alu : UInt
 
  ;; ****** Fetch *****
  reg pc = PC_START - UInt<instLen>(4)
  node iaddr = mux((ctrl.pc_sel === PC_ALU) || brCond.taken, alu.sum, pc + UInt(4))
  node inst  = mux((ctrl.inst_type === I_KILL) || brCond.taken, NOP, icache.dout)
 
  icache.we   := Bool(false)
  icache.din  := UInt(0)
  icache.addr := iaddr 
  icache.re   := ctrl.inst_re
  pc          := mux(icache.re && ! bit-or-reduce(dcache.we), iaddr, pc)
 
  ;; Pipelining
  when ! stall :
    fe_pc   := pc
    fe_inst := inst

  ;; ****** Execute *****
  ;; Decode
  ctrl.ins   := fe_inst
  ctrl.stall := stall

  ;; regFile read
  node rd_addr  = fe_inst[11, 7]
  node rs1_addr = fe_inst[19, 15]
  node rs2_addr = fe_inst[24, 20]
  regFile.raddr1 := rs1_addr
  regFile.raddr2 := rs2_addr

  ;; gen immdeates
  immGen.inst := fe_inst
  immGen.sel  := ctrl.imm_sel

  ;; bypass
  node rs1NotZero = bit-or-reduce(rs1_addr)
  node rs2NotZero = bit-or-reduce(rs2_addr)
  node alutype = ctrl.wb_en && ctrl.wb_sel === WB_ALU
  node ex_rd_addr = ew_inst[11, 7]
  node rs1 = mux(alutype && rs1NotZero && (rs1_addr === ex_rd_addr), ew_alu, regFile.rdata1)
  node rs2 = mux(alutype && rs2NotZero && (rs2_addr === ex_rd_addr), ew_alu, regFile.rdata2) 
  
  ;; ALU operations
  alu.A := mux(ctrl.A_sel === A_RS1, rs1, fe_pc)
  alu.B := mux(ctrl.B_sel === B_RS2, rs2, immGen.out)
  alu.alu_op := ctrl.alu_op

  ;; Branch condition calc
  brCond.rs1 := rs1 
  brCond.rs2 := rs2
  brCond.br_type := ctrl.br_type

  ;; D$ access
  node woffset = (alu.sum[1] << 4) | (alu.sum[0] << 3)
  dcache.re   := ctrl.data_re 
  dcache.addr := mux(stall, ew_alu, alu.sum)
  dcache.we   := mux(stall, UInt("b0000"), mux-lookup(ctrl.st_type, UInt("b0000"), [
    ST_SW => UInt("b1111"),
    ST_SH => (UInt("b11") << alu.sum[1,0])[3,0],
    ST_SB => (UInt("b1")  << alu.sum[1,0])[3,0] ]))
  dcache.din  := (rs2 << woffset)[instLen - 1, 0]
  
  ;; Pipelining
  when ! stall :
    ew_pc   := fe_pc
    ew_inst := fe_inst
    ew_alu  := alu.out

  ;; Load
  node loffset = (ew_alu[1] << 4) | (ew_alu[0] << 3)
  node lshift = dcache.dout >> loffset
  node load =  mux-lookup(ctrl.ld_type, dcache.dout, [
    LD_LH  => to-uint(pad(to-sint(lshift[15, 0]), instLen)),
    LD_LB  => to-uint(pad(to-sint(lshift[7, 0]), instLen)),
    LD_LHU => to-uint(lshift[15, 0]),
    LD_LBU => to-uint(lshift[7, 0])] )
    
  inst csr of CSR
  host := csr.host
  csr.src  := ew_alu 
  csr.addr := ew_inst[31, 20]
  csr.cmd  := ctrl.csr_cmd

  ;; Regfile Write
  node regWrite = mux-lookup(ctrl.wb_sel, ew_alu, [
    WB_MEM  => load,
    WB_PC_4 => (ew_pc + UInt(4)),
    WB_CSR  => csr.data] )

  regFile.wen   := ctrl.wb_en
  regFile.waddr := ex_rd_addr
  regFile.wdata := regWrite
