#use-syntax(core, chipper)

defpackage ALU :
   import core
   import verse
   import chipper
   import stdlib
   import Params

public val ALU_ADD    = UInt<4>(0)
public val ALU_SUB    = UInt<4>(1)
public val ALU_AND    = UInt<4>(2)
public val ALU_OR     = UInt<4>(3)
public val ALU_XOR    = UInt<4>(4)
public val ALU_SLT    = UInt<4>(5)
public val ALU_SLL    = UInt<4>(6)
public val ALU_SLTU   = UInt<4>(7)
public val ALU_SRL    = UInt<4>(8)
public val ALU_SRA    = UInt<4>(9)
public val ALU_COPY_A = UInt<4>(10)
public val ALU_COPY_B = UInt<4>(11)
public val ALU_XXX    = UInt<4>(15)

public defmodule ALU :
  input  A      : UInt<instLen>
  input  B      : UInt<instLen>
  input  alu_op : UInt<4>
  output out    : UInt<instLen>
  output sum    : UInt<instLen>

  node shamt = B[4,0]

  val oot = mux-lookup(alu_op, B, [
      ALU_ADD  => (A + B),
      ALU_SUB  => (A - B),
      ALU_SRA  => as-uint(as-sint(A) >> shamt)
      ALU_SRL  => (A >> shamt),
      ALU_SLL  => (A << shamt)[instLen - 1, 0],
      ALU_SLT  => as-sint(A) < as-sint(B),
      ALU_SLTU => (A < B),
      ALU_AND  => (A & B),
      ALU_OR   => (A | B),
      ALU_XOR  => (A ^ B),
      ALU_COPY_A => A])

  out := oot[instLen - 1, 0]
  sum := A + mux(alu_op[0], as-uint(neg(B)), B)

