#use-syntax(core, chipper)

defpackage ALUTop :
   import core
   import verse
   import chipper
   import stdlib
   import Params
   import Opcodes
   import ALU

public defmodule ALUdec :
  input opcode : UInt<7>
  input funct  : UInt<3>
  input add_rshift_type : UInt<1>
  output alu_op : UInt<4>

  node alu_op1 = mux-lookup(funct, ALU_XXX, [
    Funct3-ADD_SUB => mux(add_rshift_type, ALU_SUB, ALU_ADD),
    Funct3-SLL     => ALU_SLL,
    Funct3-SLT     => ALU_SLT,
    Funct3-SLTU    => ALU_SLTU,
    Funct3-XOR     => ALU_XOR,
    Funct3-OR      => ALU_OR,
    Funct3-AND     => ALU_AND,
    Funct3-SRL_SRA => mux(add_rshift_type, ALU_SRA, ALU_SRL)] )

  node alu_op2 = mux-lookup(opcode, ALU_XXX, [
    Opcode-LUI       => ALU_COPY_B,
    Opcode-AUIPC     => ALU_ADD,
    Opcode-JAL       => ALU_ADD,
    Opcode-JALR      => ALU_ADD,
    Opcode-BRANCH    => ALU_ADD,
    Opcode-STORE     => ALU_ADD,
    Opcode-LOAD      => ALU_ADD,
    Opcode-ARI_RTYPE => alu_op1,
    Opcode-ARI_ITYPE => alu_op1] )

  alu_op := alu_op2  

public defmodule ALUTop :
  input  opcode : UInt<7>
  input  funct : UInt<3>
  input  add_rshift_type : UInt<1>
  input  A : UInt<instLen>
  input  B : UInt<instLen>
  output out : UInt<instLen>

  inst alu     of ALU
  inst alu_dec of ALUdec

  alu_dec.opcode := opcode
  alu_dec.funct := funct
  alu_dec.add_rshift_type := add_rshift_type

  alu.A := A
  alu.B := B
  out := alu.out

  alu.alu_op := alu_dec.alu_op
