#use-syntax(core, chipper)

defpackage Memory :
   import core
   ;; import verse
   import chipper
   import Params
   import stdlib
   import decoupled
   import CSR
   import Control

public defbundle CacheIO :
  addr : UInt<addrLen>
  din  : UInt<instLen>
  flip dout : UInt<instLen>
  re   : UInt<1>
  we   : UInt<4>

public defbundle MemReqCmd :
  rw   : UInt<1>
  addr : UInt<addrLen>
  tag  : UInt<tagLen>
  mask : UInt<4>

public defbundle MemReqData :
  data : UInt<memLen>

public defbundle MemResp :
  data : UInt<memLen>
  tag  : UInt<tagLen>

public defbundle MemIO :
  req_cmd   : DecoupledIO<MemReqCmd>
  req_data  : DecoupledIO<MemReqData>
  flip resp : DecoupledIO<MemResp>

public defmodule Memory :
  output stall  : UInt<1>
  output memory : MemIO
  input  icache : CacheIO
  input  dcache : CacheIO

  inst memReqCmdQueue  of Fifo<MemReqCmd>(4, false, false)
  inst memReqDataQueue of Fifo<MemReqData>(4, false, false)
  val [s_READY, s_WAIT] = [UInt(0), UInt(1)]
  reg state  = s_READY
  reg tag    = UInt<tagLen>(0)
  node cpuReq = (state === s_READY) & (icache.re | dcache.re | bit-or-reduce(dcache.we))
  node iaddr  = cat(icache.addr[addrLen - 1, 2], UInt<2>(0))
  node daddr  = cat(dcache.addr[addrLen - 1, 2], UInt<2>(0))
  reg idata : UInt
  reg ddata  : UInt
  reg ire    : UInt<1>
  reg dre    : UInt<1>
  ;; TODO: PERHAPS DO THIS WITH REG WRAPPER
  icache.dout := idata ;; memory.resp.bits.data
  dcache.dout := ddata ;; memory.resp.bits.data
  memory.req_cmd := memReqCmdQueue.deq
  memory.req_data := memReqDataQueue.deq
  memory.resp.ready := UInt(false)
  stall := (state === s_WAIT) | ! memReqCmdQueue.enq.ready | ! memReqDataQueue.enq.ready
  memReqCmdQueue.enq.bits.rw    := bit-or-reduce(dcache.we)
  memReqCmdQueue.enq.bits.tag   := tag
  memReqCmdQueue.enq.bits.addr  := mux(bit-or-reduce(dcache.we) | ! icache.re, daddr, iaddr)
  memReqCmdQueue.enq.bits.mask  := dcache.we
  memReqCmdQueue.enq.valid      := memReqDataQueue.enq.ready & cpuReq
  memReqDataQueue.enq.bits.data := dcache.din
  memReqDataQueue.enq.valid     := memReqCmdQueue.enq.ready & cpuReq & bit-or-reduce(dcache.we)

  when state === s_READY :
    when (icache.re | dcache.re) & ! bit-or-reduce(dcache.we) & memReqCmdQueue.enq.ready :
      ire := icache.re 
      dre := dcache.re 
      state := s_WAIT
  when state === s_WAIT :
    memory.resp.ready := UInt(true)
    when memory.resp.valid & memory.resp.bits.tag === tag:
      state := s_READY
      tag   := tag + UInt(1)
      memory.resp.ready := UInt(false)
      when ire : idata := memory.resp.bits.data
      when dre : ddata := memory.resp.bits.data
