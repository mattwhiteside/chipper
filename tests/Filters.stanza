;See License.txt for details about licensing.

#use-syntax(core, chipper)

defpackage Filters :
   import core
   import collections
   import chipper
   import stdlib

defbundle Valid<T & Data> () :
  data : T
  valid : UInt<1>

defbundle FilterIO<T & Data> () :
  flip in : Valid<T>
  out : Valid<T>

;; defn filter<?T> (io: FilterIO, f: T&Bits -> T&Bits) :
;;   out.valid(io) := in.valid(io)
;;   out.data(io)  := f(in.data(io))

;; defn filter<?T> (f: Valid<T&Bits> -> Valid<T&Bits>, in: Valid<?T&Bits>) -> Valid<T&Bits> :
;;   wire out : Valid<#{ in.T }>
;;   out.valid := in.valid
;;   out.data  := f(in.data)
;;   out
  
;; ;; definterface Filter <: Data
;; ;; defmulti field#data (f:Filter) -> UInt
;; ;; defmulti field#valid (f:Filter) -> UInt
;; 
;; ;; defmodule FunctionFilter<T>  (f: T -> T) : 
;; ;;   output io : FilterIO<T>
;; ;;   io.out.valid := io.in.valid
;; ;;   io.out.data  := f(io.in.data)
;; 
;; ;; defmethod field#data (f:FunctionFilter) :
;; ;;   f.io.data
;; ;; defmethod field#valid (f:FunctionFilter) :
;; ;;   f.io.valid

defn wire-filter<?T> (io:FilterIO<?T>, f: T -> T) :
  io.out.valid := io.in.valid
  io.out.data  := f(io.in.data)

defmodule FunctionFilter<T & Bits> (f: T&Bits -> T&Bits) :
  output io : FilterIO<T>
  wire-filter(io, f)

defmodule FunctionFilter<T & Bits> (f: T&Bits -> T&Bits) :
  output io : FilterIO<T>
  wire-filter(io, f)

;; defmodule FunctionFilter<T & Bits> (f: T&Bits -> T&Bits) :
;;   output io : FilterIO<T>
;;   io.out.valid := io.in.valid
;;   io.out.data  := f(io.in.data)

defn min<?T> (x:?T&Bits, y:?T&Bits) -> T :
  mux(x < y, x, y)

defn max<?T> (x:?T&Bits, y:?T&Bits) -> T :
  mux(x < y, y, x)

defn ClippingFilter<?T> (dtype:?T&Bits, limit: T&Bits) :
  instof FunctionFilter<#{dtype}>(min{limit, max(neg(limit), _)})

defn ShiftingFilter<?T> (dtype:?T&Bits, shift: Int) :
  instof FunctionFilter<#{dtype}>({_ >> shift})

defmodule ShiftingClippingFilter<T & Bits> (limit: T&Bits, shift: Int) :
  output io : FilterIO<T>
  ;; val sf = ShiftingFilter(T, shift)
  ;; val cf = ClippingFilter(T, limit)
  val sf = ShiftingFilter(T, shift)
  val cf = ClippingFilter(T, limit)
  sf.io.in := io.in
  cf.io.in := sf.io.out
  io.out   := cf.io.out

defn main () :
   ;; max(UInt(0), UInt(1))
   ;; circuit c : ShiftingFilter<UInt<32>>(2))
   ;; circuit c : ShiftingFilter(#{UInt<32>}, 2)
   ;; circuit c : ClippingFilter(#{UInt<32>}, UInt(2))
   circuit c : ShiftingClippingFilter<UInt<32>>(UInt(2), 2)
   println(c)
   
main()


