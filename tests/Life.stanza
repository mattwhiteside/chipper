#include("src/firrtl-ir.stanza")
#include("src/ir-utils.stanza")
#include("src/chipper.stanza")
#use-syntax(core, chipper)

defpackage life :
   import core
   import verse
   import chipper

defmodule Cell (born?: True|False) :
   input nbrs: UInt<1>[8]
   input reset: UInt<1>
   output out: UInt<1>
   
   reg alive?: UInt<1>
   val count = reduce(plus, nbrs)
   when count < UInt(2) :
      alive? := UInt(0)
   else when count < UInt(4) :
      alive? := UInt(1)
   else :
      alive? := UInt(0)
   out := alive?
   
   when reset :
      alive? :=
         if born? : UInt(1)
         else : UInt(0)

defmodule Life (n:Int) :
   output state: UInt<1>[n * n]
   
   defn idx (i:Int, j:Int) :
      val i* = (i + n) % n
      val j* = (j + n) % n
      j* * n + i*
      
   defn neighbours (i:Int, j:Int) :
      generate<Int> :
         yield(idx(i - 1, j - 1))
         yield(idx(i    , j - 1))
         yield(idx(i + 1, j - 1))
         yield(idx(i - 1, j    ))
         yield(idx(i + 1, j    ))
         yield(idx(i - 1, j + 1))
         yield(idx(i    , j + 1))
         yield(idx(i + 1, j + 1))
      
   val cells = to-array $
      for i in 0 to n * n stream :
         inst c of Cell(rand(2) == 0)
         c

   for j in 0 to n do :
      for i in 0 to n do :
         val k = j * n + i
         state[k] := cells[k].out
         for (nk in neighbours(i, j), ni in 0 to 8) do :
            cells[k].nbrs[ni] := cells[nk].out         

defn main () :
   circuit c of Life(5)
   println(c)
   
main()
