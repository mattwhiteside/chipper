;See License.txt for details about licensing.

#use-syntax(core, chipper)

defpackage module-vec :
   import core
   import collections
   import chipper
   import stdlib

definterface AnyPlusMinusOne <: Data
defmulti inc (mod:AnyPlusMinusOne)

defmodule PlusMinusOne <: AnyPlusMinusOne :
  input in : UInt<32>
  output out : UInt<32>
  input isInc : UInt<1>
  out := mux(isInc, in + UInt(1), in - UInt(1))
  out := in + UInt(1)

defmethod inc (mod:PlusMinusOne) : mod.isInc := UInt(1)

defmodule ModuleVec (n: Int) :
  input ins  : UInt<32>[n]
  output outs : UInt<32>[n]
  wire pluses : PlusMinusOne[n]
  for i in 0 to n do :
     pluses[i] := instof PlusMinusOne
     
  for i in 0 to n do :
    pluses[i].in    := ins[i]
    inc(pluses[i])
    ;; pluses[i].isInc := UInt(1)
    outs[i]         := pluses[i].out 

defn main () :
   circuit c : ModuleVec(4)
   println(c)

main()

