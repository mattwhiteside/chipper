defpackage chipper :
   import core
   import verse
   import firrtl/ir with :
      prefix => f

;;; UTILS

defn map (f : Char -> Char, s : String) -> String :
  val ls = map(f, to-list(s))
  val buf = StringBuffer()
  do(add{buf, _}, ls)
  to-string(buf)

public defn to-hex (num: Int) -> String :
  val buf = StringBuffer()
  print(buf, "0x")
  var rems = List<Int>()
  var x : Int = num
  defn* loop () :
    rems = List(x % 16, rems)
    x = x / 16
    if x > 0: loop()
  loop()
  for r in rems do :
    print(buf, to-char((to-int('0') + r) when r < 10 else (to-int('a') + r - 10)))
  to-string(buf)

val hex-tbl = Array<Int>(256)
var hex-tbl-init? = false
defn init-hex-tbl () :
  if not hex-tbl-init? :
    for i in 0 to 10 do :
      hex-tbl[i + to-int('0')] = i
    for i in 0 to 6 do :
      hex-tbl[i + to-int('a')] = i + 10
    hex-tbl-init? = true

public defn to-hex-int (s:String) -> Int :
  init-hex-tbl()
  var res = 0
  for i in 2 to length(s) do :
    res = 16 * res + hex-tbl[to-int(s[i])]
  res

public defn rand (lo:Int, hi:Int) -> Int :
   (rand() % (hi - lo + 1)) + lo

;;;

public defn sizeof (in: Int) -> Int :
  max(1, ceil-log2(in + 1))

;========= CHIPPER BASIC INTERFACE ===========
public definterface Data
public defmulti firrtl-exp (e:Data) -> fExpression
public defmulti type<?T> (e:?T&Data) -> Type<T>
public defmulti flatten (e:Data) -> Streamable<UInt>
public defmulti width (x:Data) -> Int

public defn lit-value (d:Data) -> Int|False :
  match(firrtl-exp(d)) :
    (e:fUIntValue): fvalue(e)
    (e)           : false

public defn lit-value! (d:Data) -> Int :
  match(lit-value(d)) :
    (e:Int): e
    (e)    : error("Expected Lit Value")

public defmethod width (x:Data) -> Int :
   reduce(plus, 0, map(width, to-list(flatten(x))))

public defn value (w: fWidth) -> Int :
  match(w) :
    (iw:fIntWidth): fwidth(iw)
    (o):            error("Unable to get width")

public defn to-bits (x:Data) -> UInt :
   reduce(cat, UIntLit(0), to-list(flatten(x)))

public defn from-bits!<?T> (dst:?T & Data, from:UInt) :
   var i = 0
   for x in flatten(dst) do :
     ConnectExp(x, from[i + width(x) - 1, i])
     i = i + width(x)
   dst

public definterface Type<T>
public defmulti firrtl-type (t:Type) -> fType
public defmulti handle<?T> (t:Type<?T>, e:fExpression) -> T
public defmulti erase-width<?T> (t:Type<?T>) -> Type<T>

public definterface CHModule
public defmulti firrtl-module (m:CHModule) -> Symbol

;WORKAROUND FOR STANZA BUG: Every multi needs to have at least one method.
defmethod firrtl-exp (e:Data) : error("Unimplemented.")
defmethod type (e:Data) : error("Unimplemented.")
defmethod firrtl-type (t:Type) : error("Unimplemented.")
defmethod handle (t:Type, e:fExpression) : error("Unimplemented.")
defmethod erase-width (t:Type) : error("Unimplemented.")
defmethod firrtl-module (m:CHModule) : error("Unimplemented.")

;=== Statement Vector ===
var STATEMENT-VECTOR:Vector<fStmt> = Vector<fStmt>()
defn build-statement (f: () -> ?) :
   let-var STATEMENT-VECTOR = Vector<fStmt>() :
      f()
      fBegin(to-list(STATEMENT-VECTOR))

;=== Module Vector ===
var MODULE-VECTOR:Vector<fModule> = Vector<fModule>()
var MODULE-NAMES  = HashTable<Symbol,True|False>(symbol-hash, 8)
public defn Node (e:fExpression) :
   val name = gensym(`tmp)
   add(STATEMENT-VECTOR, fDefNode(name, e))
   fRef(name, fUnknownType())

;=== Component Creation ===
public defn RegisterExp<?T> (name:Symbol, type:Type<?T>) :
   val name* = gensym(name)
   add(STATEMENT-VECTOR, fDefRegister(name*, firrtl-type(type)))
   handle(type, fRef(name*, fUnknownType()))

public defn RegisterFromExp<?T> (name:Symbol, exp:?T&Data) :
   val h = RegisterExp(name, erase-width(type(exp)))
   ConnectExp(h, exp)
   h

public defn RegisterResetFromExp<?T> (name:Symbol, exp:?T&Data) :
   val h = RegisterExp(name, erase-width(type(exp)))
   OnResetExp(h, exp)
   h

public defn Reg<?T> (x:?T & Data) -> T :
   RegisterFromExp(gensym(`reg), x)

public defn WireExp<?T> (name:Symbol, type:Type<?T>) :
   val name* = gensym(name)
   add(STATEMENT-VECTOR, fDefWire(name*, firrtl-type(type)))
   handle(type, fRef(name*, fUnknownType()))

public defn WireFromExp<?T> (name:Symbol, exp:?T&Data) :
   val h = WireExp(name, erase-width(type(exp)))
   ConnectExp(h, exp)
   h

public defn NodeExp<?T> (name:Symbol, x:?T&Data) -> T :
   val name* = gensym(name)
   add(STATEMENT-VECTOR, fDefNode(name*, firrtl-exp(x)))
   handle(type(x), fRef(name*, fUnknownType()))

public defn CMemExp<?T> (name:Symbol, type:Type<?T>) -> T :
   val name* = gensym(name)
   add(STATEMENT-VECTOR, fDefCMemory(name*, firrtl-type(type) as fVectorType))
   handle(type, fRef(name*, fUnknownType()))

public defn SMemExp<?T> (name:Symbol, type:Type<?T>) -> T :
   val name* = gensym(name)
   add(STATEMENT-VECTOR, fDefSMemory(name*, firrtl-type(type) as fVectorType))
   handle(type, fRef(name*, fUnknownType()))

public defn InstanceExp<?T> (name:Symbol, module:Type<?T>&CHModule) :
   val name* = gensym(name)
   add(STATEMENT-VECTOR, fDefInstance(name*, fRef(firrtl-module(module), fUnknownType())))
   handle(module, fRef(name*, fUnknownType()))

public defn CircuitExp (module:CHModule) :
   let-var MODULE-VECTOR = Vector<fModule>() :
      let-var MODULE-NAMES  = HashTable<Symbol,True|False>(symbol-hash, 8) :
        val main = firrtl-module(module)
        fCircuit(to-list(MODULE-VECTOR), main)

public defn ConnectExp (x:Data, y:Data) :
   val x* = firrtl-exp(x)
   val y* = firrtl-exp(y)
   add(STATEMENT-VECTOR, fConnect(x*, y*))

public defn OnResetExp (x:Data, y:Data) :
   val x* = firrtl-exp(x)
   val y* = firrtl-exp(y)
   add(STATEMENT-VECTOR, fOnReset(x*, y*))

public defn WhenExp (pred:Data, conseq: () -> ?, alt: () -> ?) :
   val p = firrtl-exp(pred)
   val c = build-statement(conseq)
   val a = build-statement(alt)
   add(STATEMENT-VECTOR, fConditionally(p, c, a))
   
public defn WhenExp (pred:Data, conseq: () -> ?) :
   val p = firrtl-exp(pred)
   val c = build-statement(conseq)
   add(STATEMENT-VECTOR, fConditionally(p, c, fEmptyStmt()))

public defn ModuleExp (name, ports:List<fPort>, f: () -> ?) -> Symbol :
   val name? = set?(MODULE-NAMES, name, true)
   val name* = if name?: name else: gensym(name) 
   val body = build-statement(f)
   add(MODULE-VECTOR, fModule(name*, ports, body))
   name*

;================ VECTORS ==================================
public defclass Vec<T> <: Data & Streamable<T> & Lengthable
public defmulti get<?T> (v:Vec<?T>, i:Int) -> T
public defmulti get<?T> (v:Vec<?T>, i:Data) -> T
defn VecHandle<T> (T:Type<T&Data>, n:Int, e:fExpression) :
   new Vec<T&Data> :
      defmethod firrtl-exp (this) :
         e
      defmethod type (this) :
         VecType<T&Data>(T, n)
      defmethod length (this) :
         n
      defmethod get (this, i:Int) :
         handle(T, fIndex(e, i, fUnknownType()))
      defmethod get (this, i:Data) :
         val name* = gensym(`a)
         add(STATEMENT-VECTOR, fDefAccessor(name*, e, firrtl-exp(i)))
         handle(T, fRef(name*, fUnknownType()))
      defmethod to-stream (this) :
         for i in 0 to n stream :
            this[i]
      defmethod flatten (this) -> Streamable<UInt> :
         concat-all(map(flatten, to-list(this)))

public defclass VecType<T> <: Type<Vec<T>>
defn VecType<T> (T:Type<T&Data>, n:Int) :
   new VecType<T> :
      defmethod firrtl-type (this) :
         fVectorType(firrtl-type(T), n)
      defmethod handle (this, e:fExpression) :
         VecHandle<T>(T, n, e)
      defmethod erase-width (this) :
         VecType<T>(erase-width(T), n)

public defn Vec<?T> (T:Type<?T&Data>, n:Int) :
   VecType<T>(T, n)

;================ BITS =========================
public definterface Bits <: Data

;================ UNSIGNED INTEGERS =========================
public definterface UInt <: Bits
defclass UIntC <: UInt
defn UIntHandle (w:fWidth, e:fExpression) :
   new UIntC : 
      defmethod firrtl-exp (this) : e
      defmethod type (this) : UIntType(w) as Type<UIntC>
      defmethod flatten (this) -> Streamable<UInt> : list(this)
      defmethod width (this) : value(w)

public defclass UIntType <: Type<UInt>
defn UIntType (w:fWidth) -> Type<UInt> :
   new UIntType :
      defmethod firrtl-type (this) : fUIntType(w)
      defmethod handle (this, e:fExpression) : UIntHandle(w, e)
      defmethod erase-width (this) : UIntType(fUnknownWidth())

public defn UInt (w:Int) : UIntType(fIntWidth(w))
public defn UInt () : UIntType(fUnknownWidth())

public defn UIntLit (v:True|False) :
   UIntLit(if v: 1 else: 0)
public defn UIntLit (v:Int) :
   UIntLit(v, sizeof(v))
public defn UIntLit (v:Int, w:Int) :
   val e = fUIntValue(v, fIntWidth(w))
   handle(UInt(w), e)
public defn UIntLit (v:String) : UIntLit(to-lit-val(v))
public defn UIntLit (v:String, w:Int) : UIntLit(to-lit-val(v), w)

;================ SIGNED INTEGERS =========================
public definterface SInt <: Bits
defclass SIntC <: SInt
defn SIntHandle (w:fWidth, e:fExpression) :
   new SIntC : 
      defmethod firrtl-exp (this) : e
      defmethod type (this) : SIntType(w) as Type<SIntC> 
      defmethod flatten (this) -> Streamable<UInt> : list(as-uint(this))
      defmethod width (this) : value(w)

public defclass SIntType <: Type<SInt>
defn SIntType (w:fWidth) -> Type<SInt> :
   new SIntType :
      defmethod firrtl-type (this) : fSIntType(w)
      defmethod handle (this, e:fExpression) : SIntHandle(w, e)
      defmethod erase-width (this) : SIntType(fUnknownWidth())

public defn SInt (w:Int) : SIntType(fIntWidth(w))
public defn SInt () : SIntType(fUnknownWidth())

public defn SIntLit (v:Int) :
   SIntLit(v, sizeof(v) + (if v < 0: 0 else: 1))
public defn SIntLit (v:Int, w:Int) :
   val e = fSIntValue(v, fIntWidth(w))
   handle(SInt(w), e)

;============== CONVENIENCE FUNCTIONS =======================
defn binop-node (ret:Type, op:fPrimOp, x:Data, y:Data) :
   handle{ret, Node(_)} $ fDoPrim(op, list(ex, ey), List(), fUnknownType()) where :
      val ex = firrtl-exp(x)
      val ey = firrtl-exp(y)

defn unaop-node (ret:Type, op:fPrimOp, x:Data, ys:List<Int>) :
   handle{ret, Node(_)} $ fDoPrim(op, list(ex), ys, fUnknownType()) where :
      val ex = firrtl-exp(x)

defn unaop-node (ret:Type, op:fPrimOp, x:Data, y:Int) :
   unaop-node(ret, op, x, list(y))

;=========== OPERATIONS ON UNSIGNED INTEGERS ================      
public defn plus (x:UInt, y:UInt) -> UInt : binop-node(UInt(), fADD-WRAP-OP, x, y)
public defn minus (x:UInt, y:UInt) -> UInt : binop-node(UInt(), fSUB-WRAP-OP, x, y)
public defn times (x:UInt, y:UInt) -> UInt : binop-node(UInt(), fMUL-OP, x, y)
public defn divide (x:UInt, y:UInt) -> UInt : binop-node(UInt(), fDIV-OP, x, y)
public defn modulo (x:UInt, y:UInt) -> UInt : binop-node(UInt(), fMOD-OP, x, y)
public defn neg (x:UInt) -> SInt : SIntLit(0) - to-sint(x)
public defn pad (x:UInt, w:Int) -> UInt : unaop-node(UInt(), fPAD-OP, x, w)

public defn less? (x:UInt, y:UInt) -> UInt : binop-node(UInt(), fLESS-OP, x, y)
public defn less-eq? (x:UInt, y:UInt) -> UInt : binop-node(UInt(), fLESS-EQ-OP, x, y)
public defn greater? (x:UInt, y:UInt) -> UInt : binop-node(UInt(), fGREATER-OP, x, y)
public defn greater-eq? (x:UInt, y:UInt) -> UInt : binop-node(UInt(), fGREATER-EQ-OP, x, y)
public defn bit-equal? (x:UInt, y:UInt) -> UInt : binop-node(UInt(), fEQUAL-OP, x, y)
public defn bit-not-equal? (x:UInt, y:UInt) -> UInt : binop-node(UInt(), fNEQUAL-OP, x, y)

public defn cat (x:UInt, y:UInt) -> UInt : binop-node(UInt(), fCONCAT-OP, x, y)
public defn cat (elts:Streamable<UInt>) -> UInt  : reduce(cat, to-list(elts))
public defn bit-and (x:UInt, y:UInt) -> UInt : binop-node(UInt(), fBIT-AND-OP, x, y)
public defn bit-or (x:UInt, y:UInt) -> UInt : binop-node(UInt(), fBIT-OR-OP, x, y)
public defn bit-xor (x:UInt, y:UInt) -> UInt : binop-node(UInt(), fBIT-XOR-OP, x, y)
public defn bit-or-reduce (x:UInt) -> UInt : bit-not(bit-equal?(x, UIntLit(0)))
public defn bit-and-reduce (x:UInt) -> UInt : bit-equal?(x, UIntLit(-1))
public defn bit-xor-reduce (x:UInt) -> UInt : unaop-node(UInt(), fBIT-XOR-REDUCE-OP, x, list())

public defn shift-left (x:UInt, y:Int) -> UInt : unaop-node(UInt(), fSHIFT-LEFT-OP, x, y)
public defn shift-right (x:UInt, y:Int) -> UInt : unaop-node(UInt(), fSHIFT-RIGHT-OP, x, y)
public defn shift-left (x:UInt, y:UInt) -> UInt : binop-node(UInt(), fDYN-SHIFT-LEFT-OP, x, y)
public defn shift-right (x:UInt, y:UInt) -> UInt : binop-node(UInt(), fDYN-SHIFT-RIGHT-OP, x, y)

public defn complement (x:UInt) -> UInt : bit-not(x)
public defn bit-not (x:UInt) -> UInt : unaop-node(UInt(), fBIT-NOT-OP, x, list())
public defn get (x:UInt, i:Int) -> UInt : unaop-node(UInt(), fBIT-SELECT-OP, x, i)
public defn get (x:UInt, i:Int, j:Int) -> UInt : unaop-node(UInt(), fBITS-SELECT-OP, x, list(i, j))

public defn to-uint (x:UInt) -> UInt : unaop-node(UInt(), fTO-UINT-OP, x, list())
public defn to-sint (x:UInt) -> SInt : unaop-node(SInt(), fTO-SINT-OP, x, list())
public defn as-uint (x:UInt) -> UInt : unaop-node(UInt(), fAS-UINT-OP, x, list())
public defn as-sint (x:UInt) -> SInt : unaop-node(SInt(), fAS-SINT-OP, x, list())

;============ OPERATIONS ON SIGNED INTERGERS ================      
public defn plus (x:SInt, y:SInt) -> SInt : binop-node(SInt(), fADD-WRAP-OP, x, y)
public defn minus (x:SInt, y:SInt) -> SInt : binop-node(SInt(), fSUB-WRAP-OP, x, y)
public defn times (x:SInt, y:SInt) -> SInt : binop-node(SInt(), fMUL-OP, x, y)
public defn divide (x:SInt, y:SInt) -> SInt : binop-node(SInt(), fDIV-OP, x, y)
public defn modulo (x:SInt, y:SInt) -> SInt : binop-node(SInt(), fMOD-OP, x, y)
public defn neg (x:SInt) -> SInt : SIntLit(0) - x
public defn pad (x:SInt, w:Int) -> SInt : unaop-node(SInt(), fPAD-OP, x, w)

public defn less? (x:SInt, y:SInt) -> UInt : binop-node(UInt(), fLESS-OP, x, y)
public defn less-eq? (x:SInt, y:SInt) -> UInt : binop-node(UInt(), fLESS-EQ-OP, x, y)
public defn greater? (x:SInt, y:SInt) -> UInt : binop-node(UInt(), fGREATER-OP, x, y)
public defn greater-eq? (x:SInt, y:SInt) -> UInt : binop-node(UInt(), fGREATER-EQ-OP, x, y)
public defn bit-equal? (x:SInt, y:SInt) -> UInt : binop-node(UInt(), fEQUAL-OP, x, y)
public defn bit-not-equal? (x:SInt, y:SInt) -> UInt : binop-node(UInt(), fNEQUAL-OP, x, y)

public defn shift-left (x:SInt, y:Int) -> SInt : unaop-node(SInt(), fSHIFT-LEFT-OP, x, y)
public defn shift-right (x:SInt, y:Int) -> SInt : unaop-node(SInt(), fSHIFT-RIGHT-OP, x, y)
public defn shift-left (x:SInt, y:UInt) -> SInt : binop-node(SInt(), fDYN-SHIFT-LEFT-OP, x, y)
public defn shift-right (x:SInt, y:UInt) -> SInt : binop-node(SInt(), fDYN-SHIFT-RIGHT-OP, x, y)

public defn to-uint (x:SInt) -> UInt : unaop-node(UInt(), fTO-UINT-OP, x, list())
public defn to-sint (x:SInt) -> SInt : unaop-node(SInt(), fTO-SINT-OP, x, list())
public defn as-uint (x:SInt) -> UInt : unaop-node(UInt(), fAS-UINT-OP, x, list())
public defn as-sint (x:SInt) -> SInt : unaop-node(SInt(), fAS-SINT-OP, x, list())

;; BitPat
val hex-nibbles = "0123456789abcdef"

defn as-digit (c: Char) -> Int :
  index-of(hex-nibbles, c) as Int

defn to-lower (c: Char) -> Char :
  if to-int(c) >= to-int('A') and to-int(c) <= to-int('Z') :
    to-char(to-int(c) - to-int('A') + to-int('a'))
  else :
    c

defn to-lit-val (x: String) -> Int :
  if x[0] == '0' and x[1] == 'x' :
    to-lit-val(substring(x, 2), 16)
  else if x[0] == 'x' or x[0] == 'h' :
    to-lit-val(substring(x, 1), 16)
  else if x[0] == 'o' :
    to-lit-val(substring(x, 1), 8)
  else if x[0] == 'b' :
    to-lit-val(substring(x, 1), 2)
  else : 
    error(string-join(["Unknown lit base " x]))

defn to-lit-val (x: String, shamt: Int) -> Int :
  var res = 0
  for c in x do :
    if c != '_' :
      if not contains?(hex-nibbles, to-lower(c)) :
        error(string-join(["Bad Literal " x " CONTAINS ILLEGAL CHARACTER " c " TO-LOWER " to-lower(c)]))
      res = res * shamt + as-digit(c)
  res

defn parse-lit (x: String) -> [String, String, Int] :
   [map(fn (c): if c == '?': '0' else: c,   x),
    map(fn (c): if c == '?': '0' else: '1', x),
    length(x)]

public defclass BitPat
public defmulti width (x:BitPat) -> Int
public defmulti mask (x:BitPat) -> String
public defmulti bits (x:BitPat) -> String
public defn BitPat (pat: String) :
   val [bits, mask, width] = parse-lit(substring(pat, 1))
   new BitPat :
      defmethod width (this) : width
      defmethod bits (this) : bits
      defmethod mask (this) : mask

public defmethod to-string (m: BitPat) -> String :
  string-join(["BitPat(" mask(m) "," bits(m) ")"])

;; TODO: BOTH SIDES
public defn bit-equal? (x:BitPat, y:UInt) -> UInt: 
  bit-equal?((UIntLit(to-lit-val(mask(x), 2), width(x)) & y),
              UIntLit(to-lit-val(bits(x), 2), width(x)))
public defn bit-not-equal? (x:BitPat, y:UInt) -> UInt : 
  bit-not(bit-equal?(x, y))

