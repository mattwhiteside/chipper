defn generate-harness (name:String) :
  println-all(["#include \"" name ".h\""])
  println-all([""])
  println-all(["static " name "_t *module = NULL;"])
  println-all(["static FILE *f = NULL;"])
  println-all(["static FILE *teefile = NULL;"])
  println-all(["static " name "_api_t *api = NULL;"])
  println-all(["static bool is_open = false;"])
  println-all([""])
  println-all(["extern \"C\" void open(void);"])
  println-all(["extern \"C\" const char* eval(const char* command);"])
  println-all(["extern \"C\" void close(void);"])
  println-all([""])
  println-all(["void open(void) {"])
  println-all(["  module = new " name "_t(); "])
  println-all(["  api = new " name "_api_t();"])
  println-all(["  api->init(module);"])
  println-all(["  f = fopen(\"" name ".vcd\", \"w\");"])
  println-all(["  teefile = fopen(\"" name ".stdin\", \"w\");"])
  println-all(["  module->set_dumpfile(f);"])
  println-all(["  api->set_teefile(teefile);"])
  println-all(["  is_open = true;"])
  println-all(["}"])
  println-all([""])
  println-all(["static std::string response;"])
  println-all([""])
  println-all(["const char* eval(const char* command) {"])
  println-all(["  response = \"err\";"])
  println-all(["  if (is_open) {"])
  println-all(["    std::string str_in(command);"])
  println-all(["    if (teefile != NULL) {"])
  println-all(["      fprintf(teefile, \"%s\\n\", str_in.c_str());"])
  println-all(["      fflush(teefile);"])
  println-all(["    }"])
  println-all(["    if (str_in != \"quit\") {"])
  println-all(["      response = api->eval_command(str_in);"])
  println-all(["    }"])
  println-all(["  }"])
  println-all(["  return response.c_str();"])
  println-all(["}"])
  println-all([""])
  println-all(["void close(void) {"])
  println-all(["  if (is_open) {"])
  println-all(["    if (f != NULL) { fclose(f); f = NULL; }"])
  println-all(["    if (teefile != NULL) { fclose(teefile); teefile = NULL; }"])
  println-all(["    is_open = false;"])
  println-all(["  }"])
  println-all(["}"])
              
defn main () :
  val args = commandline-arguments()
  if length(args) == 2 :
    val name = args[1]
    generate-harness(name)  
  else :
    println-all(STANDARD-ERROR, ["USAGE: gen-harness name"])

main()

;;  println-all(["#include \"" name ".h\""])
;;  println-all(["int main(int argc, char **argv) {"]);
;;  println-all(["  " name "_t *module = new " name "_t();"])
;;  println-all(["  module->init();\n"]);
;;  println-all(["  " name "_api_t *api = new " name "_api_t();"])
;;  println-all(["  api->init(module);\n"]);
;;  println-all(["  FILE *f = fopen(\"" name ".vcd\", \"w\");"])
;;  println-all(["  FILE *tee = fopen(\"" name ".stdin\", \"w\");"]])
;;  println-all(["  module->set_dumpfile(f);"])
;;  println-all(["  api->set_teefile(tee);"])
;;  println-all(["  api->read_eval_print_loop();"])
;;  println-all(["  fclose(f);"])
;;  println-all(["  fclose(tee);"])
;;  println-all(["  return 0;"])
;;  println-all(["}"])
