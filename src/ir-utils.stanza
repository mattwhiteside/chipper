defpackage firrtl/ir-utils :
   import core
   import collections
   import firrtl/ir

;============== PRINTERS ===================================

defmethod print (o:OutputStream, d:Flip) :
   print{o, _} $
   switch {d == _} :
      DEFAULT : ""
      REVERSE: "flip"

defmethod print (o:OutputStream, d:Direction) :
   print{o, _} $
   switch {d == _} :
      INPUT : "input"
      OUTPUT: "output"

defmethod print (o:OutputStream, w:Width) :
   print{o, _} $
   match(w) :
      (w:UnknownWidth) : "?"
      (w:IntWidth) : width(w)

defmethod print (o:OutputStream, op:PrimOp) :
   print{o, _} $
   switch {op == _} :
      ADD-OP : "add"
      SUB-OP : "sub"
      MUL-OP : "mul"
      DIV-OP : "div"
      MOD-OP : "mod"
      QUO-OP : "quo"
      REM-OP : "rem"
      ADD-WRAP-OP : "add-wrap"
      SUB-WRAP-OP : "sub-wrap"
      LESS-OP : "lt"
      LESS-EQ-OP : "leq"
      GREATER-OP : "gt"
      GREATER-EQ-OP : "geq"
      EQUAL-OP : "eq"
      NEQUAL-OP : "neq"
      MUX-OP : "mux"
      PAD-OP : "pad"
      AS-UINT-OP : "as-UInt"
      AS-SINT-OP : "as-SInt"
      DYN-SHIFT-LEFT-OP : "dshl"
      DYN-SHIFT-RIGHT-OP : "dshr"
      SHIFT-LEFT-OP : "shl"
      SHIFT-RIGHT-OP : "shr"
      TO-UINT-OP : "as-UInt"
      TO-SINT-OP : "convert"
      BIT-NOT-OP : "bit-not"
      BIT-AND-OP : "bit-and"
      BIT-OR-OP : "bit-or"
      BIT-XOR-OP : "bit-xor"
      BIT-XOR-REDUCE-OP : "bit-xor-reduce"
      CONCAT-OP : "cat"
      BIT-SELECT-OP : "bit"
      BITS-SELECT-OP : "bits"
      POW-OP : "pow"
      SIN-OP : "sin"
      COS-OP : "cos"
      TAN-OP : "tan"
      ASIN-OP : "asin"
      ACOS-OP : "acos"
      ATAN-OP : "atan"
      SQRT-OP : "sqrt"
      FLOOR-OP : "floor"
      CEIL-OP : "ceil"
      ROUND-OP : "round"
      LOG-OP : "log"
   
defmethod print (o:OutputStream, e:Expression) :
   print{o, _} $
   match(e) :
      (e:Ref) : name(e)
      (e:Subfield) : "%_.%_" % [exp(e), name(e)]
      (e:Index) : "%_[%_]" % [exp(e), value(e)]
      (e:FloValue) : "Flo(%_)" % [value(e)]
      (e:UIntValue) : "UInt<%_>(%_)" % [width(e), value(e)]
      (e:SIntValue) : "SInt<%_>(%_)" % [width(e), value(e)]
      (e:DoPrim) : "%_(%,)" % [op(e), cat(args(e), consts(e))]
      (e:ReadPort) : "ReadPort(%_, %_, %_)" % [mem(e), index(e), enable(e)]
      (e:WritePort) : "WritePort(%_, %_, %_)" % [mem(e), index(e), enable(e)]
      (e:Pad) : "Pad(%_, %_)" % [arg(e), width(e)]
      (e:Register) : "Register(%_, %_)" % [value(e), enable(e)]

defmethod print (o:OutputStream, c:Stmt) :
   val io = IndentedStream(o, 3)
   match(c) :
      (c:DefWire) :
         print(o, "wire %_ : %_" % [name(c), type(c)])
      (c:DefRegister) :
         print(o, "reg %_ : %_" % [name(c), type(c)])
      (c:DefCMemory) :
         print(o, "cmem %_ : %_" % [name(c), type(c)])
      (c:DefSMemory) :
         print(o, "smem %_ : %_" % [name(c), type(c)])
      (c:DefInstance) :
         print(o, "inst %_ of %_" % [name(c), module(c)])
      (c:DefNode) :
         print(o, "node %_ = %_" % [name(c), value(c)])
      (c:DefAccessor) :
         print(o, "accessor %_ = %_[%_]" % [name(c), source(c), index(c)])
      (c:Conditionally) :
         println(o, "when %_ :" % [pred(c)])
         print(io,conseq(c))
         if not alt(c) is EmptyStmt :
            print(o, "\nelse :")
            print(io, "\n%_" % [alt(c)])
      (c:Begin) :
         print-all(o, join(body(c), "\n"))
      (c:Connect) :
         print(o, "%_ := %_" % [loc(c), exp(c)])
      (c:OnReset) :
         print(o, "on-reset %_ := %_" % [loc(c), exp(c)])
      (c:EmptyStmt) :
         print(o, "skip")

defmethod print (o:OutputStream, t:Type) :
   print{o, _} $
   match(t) :
      (t:UnknownType) : "?"
      (t:FloType) : "Flo"
      (t:UIntType) : "UInt<%_>" % [width(t)]
      (t:SIntType) : "SInt<%_>" % [width(t)]
      (t:BundleType) : "{%,}" % [fields(t)]
      (t:VectorType) : "%_[%_]" % [type(t), size(t)]

defmethod print (o:OutputStream, f:Field) :
   val fstr = "flip " when flip(f) == REVERSE else ""
   print(o, "%_%_ : %_" % [fstr, name(f), type(f)])

defmethod print (o:OutputStream, p:Port) :
   print(o, "%_ %_ : %_" % [direction(p), name(p), type(p)])

defmethod print (o:OutputStream, m:Module) :
   println(o, "module %_ :" % [name(m)])
   val io = IndentedStream(o, 3)
   do(println{io, _}, ports(m))
   print(io, body(m))

defmethod print (o:OutputStream, c:Circuit) :
   println(o, "circuit %_ :" % [main(c)])
   val io = IndentedStream(o, 3)
   do(println{io, _}, modules(c))

;=================== MAPPERS ===============================
public defn map<?T> (f: Type -> Type, t:?T&Type) -> T :
   val type = 
      match(t) :
         (t:T&BundleType) :
            BundleType $
            for p in fields(t) map :
               Field(name(p), flip(p), f(type(p)))
         (t:T&VectorType) :
            VectorType(f(type(t)), size(t))
         (t) :
            t
   type as T&Type

public defmulti map<?T> (f: Expression -> Expression, e:?T&Expression) -> T 
defmethod map (f:Expression -> Expression, e:Expression) -> Expression :
   match(e) :
      (e:Subfield) : Subfield(f(exp(e)), name(e), type(e)) 
      (e:Index) : Index(f(exp(e)), value(e), type(e))
      (e:DoPrim) : DoPrim(op(e), map(f, args(e)), consts(e), type(e))
      (e:ReadPort) : ReadPort(f(mem(e)), f(index(e)), type(e), enable(e))
      (e:WritePort) : WritePort(f(mem(e)), f(index(e)), type(e), enable(e))
      (e:Register) : Register(type(e), f(value(e)), f(enable(e)))
      (e) : e

public defmulti map<?T> (f:Expression -> Expression, c:?T&Stmt) -> T
defmethod map (f:Expression -> Expression, c:Stmt) -> Stmt :
   match(c) :
      (c:DefAccessor) : DefAccessor(name(c), f(source(c)), f(index(c)))
      (c:DefNode) : DefNode(name(c), f(value(c)))
      (c:DefInstance) : DefInstance(name(c), f(module(c)))
      (c:Conditionally) : Conditionally(f(pred(c)), conseq(c), alt(c))
      (c:Connect) : Connect(f(loc(c)), f(exp(c)))
      (c:OnReset) : OnReset(f(loc(c)), f(exp(c)))
      (c) : c

public defmulti map<?T> (f: Stmt -> Stmt, c:?T&Stmt) -> T
defmethod map (f: Stmt -> Stmt, c:Stmt) -> Stmt :
   match(c) :
      (c:Conditionally) : Conditionally(pred(c), f(conseq(c)), f(alt(c)))
      (c:Begin) : Begin(map(f, body(c)))
      (c) : c

public defmulti children (c:Stmt) -> List<Stmt>
defmethod children (c:Stmt) :
   match(c) :
      (c:Conditionally) : List(conseq(c), alt(c))
      (c:Begin) : body(c)
      (c) : List()
