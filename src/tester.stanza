;; #include<"core/stringeater.stanza">
;; #include<"compiler/stz-lexer.stanza">
;; 
;; defpackage tester :
;;   import core
;;   import verse
;;   import stz/lexer
;;   import core/stringeater

defpackage tester :
  import core
  import verse

defn hw-open (filename:String) -> ? :
  ($do-prim ls hw-open-lo filename)

defn hw-eval (handle, cmd:String) -> String :
  ($do-prim ls hw-eval-lo handle cmd)

defn hw-close (handle) -> ? :
  ($do-prim ls hw-close-lo handle)
  
public defclass Tester
defmulti cmd (this, args:Streamable) -> String
public defmulti peek (t:Tester, name: String) -> Int
public defmulti peek (t:Tester, name: String, index: Int) -> Int
public defmulti poke (t:Tester, name: String, value: Int) -> False
public defmulti poke (t:Tester, name: String, index: Int, value: Int) -> False
public defmulti step (t:Tester) -> False
public defmulti reset (t:Tester) -> False
public defmulti expect (t:Tester, name: String, value: Int) -> True|False
public defmulti run (t:Tester, f: () -> True|False) -> True|False
public defmulti cycles (t:Tester) -> Int

val hex-tbl = Array<Int>(256)
var hex-tbl-init? = false
defn init-hex-tbl () :
  if not hex-tbl-init? :
    for i in 0 to 10 do :
      hex-tbl[i + to-int('0')] = i
    for i in 0 to 6 do :
      hex-tbl[i + to-int('a')] = i + 10
    hex-tbl-init? = true

public defn Tester (dut: String) -> Tester :
  val so     = string-join(["generated/lib" dut ".so"])
  val handle = hw-open(so)
  var cycles: Int = 0
  defn to-hex-int (s:String) -> Int :
    init-hex-tbl()
    var res = 0
    for i in 2 to length(s) do :
      res = 16 * res + hex-tbl[to-int(s[i])]
    res
  new Tester :
    defmethod cmd (this, args:Streamable) -> String :
      hw-eval(handle, string-join(args))
    defmethod poke (this, name: String, value: Int) :
      val str = cmd(this, ["wire_poke " name " " value])
      println-all(["WIRE-POKE " name " = " value " -> " str])
    defmethod poke (this, name: String, index: Int, value: Int) :
      val str = cmd(this, ["mem_poke " name " " index " " value])
      println-all(["MEM-POKE " name "[" index "] = " value " -> " str])
    defmethod peek (this, name: String) :
      val str = cmd(this, ["wire_peek " name])
      println-all(["WIRE-PEEK " name " -> " str])
      to-hex-int(str)
    defmethod peek (this, name: String, index: Int) :
      val str = cmd(this, ["mem_peek " name " " index])
      println-all(["MEM-PEEK " name "[" index "] -> " str])
      to-hex-int(str)
    defmethod reset (this) :
      val str = cmd(this, ["reset 1"])
      println-all(["RESET " 1 " -> " str])
      cycles = 0
    defmethod step (this) :
      val str = cmd(this, ["step 1"])
      println-all(["STEP " 1 " -> " str])
      cycles = cycles + 1
    defmethod expect (this, name: String, value: Int) -> True|False :
      val got = peek(this, name)
      println-all(["EXPECT " name " VALUE " value " -> " got])
      got == value
    defmethod run (this, f:() -> True|False) -> True|False :
      reset(this)
      val res = f()
      hw-close(handle)
      println-all(["DISCONNECTED "])
      res
    defmethod cycles (this) -> Int :
      cycles

;; defn parse-args (str:String) :
;;    val args = to-stream(unwrap-all(lex(str)))
;;    val arg  = next(args)
;;    to-string(arg)
;; 
;; defn main () :
;;    val circuit = parse-args(commandline-arguments())
;;    connect(circuit)
;;    val args = ScopeArgs(circuit, list-wires())
;;    disconnect()
;; 
;; main()
