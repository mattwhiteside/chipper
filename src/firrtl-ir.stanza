;See License.txt for details about licensing.

defpackage firrtl/ir :
   import core
   import collections
   
public defstruct Direction <: Equalable  :
  id: Int
public val INPUT = Direction(0)
public val OUTPUT = Direction(1)

defmethod equal? (d0: Direction, d1: Direction) : equal?(id(d0), id(d1))

public defstruct Flip <: Equalable  :
  id: Int
public val DEFAULT = Flip(0)
public val REVERSE = Flip(1)

defmethod equal? (f0: Flip, f1: Flip) : equal?(id(f0), id(f1))

public deftype Width
public defstruct UnknownWidth <: Width
public defstruct IntWidth <: Width :
   width: Int

public defstruct PrimOp <: Equalable :
  id: Int

defmethod equal? (p0: PrimOp, p1: PrimOp) : equal?(id(p0), id(p1))

public val ADD-OP = PrimOp(0)
public val SUB-OP = PrimOp(1)
public val MUL-OP = PrimOp(2)
public val DIV-OP = PrimOp(3)
public val MOD-OP = PrimOp(4)
public val QUO-OP = PrimOp(5)
public val REM-OP = PrimOp(6)
public val ADD-WRAP-OP = PrimOp(7)
public val SUB-WRAP-OP = PrimOp(8)
public val LESS-OP = PrimOp(9)
public val LESS-EQ-OP = PrimOp(10)
public val GREATER-OP = PrimOp(11)
public val GREATER-EQ-OP = PrimOp(12)
public val EQUAL-OP = PrimOp(13)
public val NEQUAL-OP = PrimOp(14)
public val MUX-OP = PrimOp(15)
public val PAD-OP = PrimOp(16)
public val AS-UINT-OP = PrimOp(17)
public val AS-SINT-OP = PrimOp(18)
public val SHIFT-LEFT-OP = PrimOp(19)
public val DYN-SHIFT-LEFT-OP = PrimOp(20)
public val SHIFT-RIGHT-OP = PrimOp(21)
public val DYN-SHIFT-RIGHT-OP = PrimOp(22)
public val TO-UINT-OP = PrimOp(23)
public val TO-SINT-OP = PrimOp(24)
public val BIT-AND-OP = PrimOp(25)
public val BIT-OR-OP = PrimOp(26)
public val BIT-XOR-OP = PrimOp(27)
public val BIT-XOR-REDUCE-OP = PrimOp(28)
public val BIT-NOT-OP = PrimOp(29)
public val CONCAT-OP = PrimOp(30)
public val BIT-SELECT-OP = PrimOp(31)
public val BITS-SELECT-OP = PrimOp(32)

public val POW-OP = PrimOp(33)
public val SIN-OP = PrimOp(34)
public val COS-OP = PrimOp(35)
public val TAN-OP = PrimOp(36)
public val ASIN-OP = PrimOp(37)
public val ACOS-OP = PrimOp(38)
public val ATAN-OP = PrimOp(39)
public val SQRT-OP = PrimOp(40)
public val FLOOR-OP = PrimOp(41)
public val CEIL-OP = PrimOp(42)
public val ROUND-OP = PrimOp(43)
public val LOG-OP = PrimOp(44)

public deftype Expression
public defmulti type (e:Expression) -> Type

public defstruct NoExp <: Expression
defmethod type (e:NoExp) -> Type : UnknownType()

public defstruct Ref <: Expression :
   name: Symbol
   type: Type with: (as-method => true)
public defstruct Subfield <: Expression :
   exp: Expression
   name: Symbol
   type: Type with: (as-method => true)
public defstruct Index <: Expression :
   exp: Expression
   value: Int
   type: Type with: (as-method => true)
public defstruct FloValue <: Expression :
   value: Float
public defstruct UIntValue <: Expression :
   value: Int
   width: Width
public defstruct SIntValue <: Expression :
   value: Int
   width: Width
public defstruct DoPrim <: Expression :
   op: PrimOp
   args: List<Expression>
   consts: List<Int>
   type: Type with: (as-method => true)
public defstruct ReadPort <: Expression :
   mem: Expression
   index: Expression
   type: Type with: (as-method => true)
   enable: Expression
public defstruct WritePort <: Expression :
   mem: Expression
   index: Expression
   type: Type with: (as-method => true)
   enable: Expression
public defstruct Register <: Expression :
   type: Type with: (as-method => true)
   value: Expression
   enable: Expression
public defstruct Pad <: Expression :
   arg: Expression
   width: Width

public defmulti pad-to (x:Expression, w:Int, pad:Int) -> Expression

public defmethod pad-to (x:Expression, w:Int, pad:Int) -> Expression :
  ;; println-all(["PAD-TO E " x " W " w " PAD " pad])
  if pad == 0 or (pad > 0 and pad == w): x else: Pad(x, (if pad == -1: UnknownWidth() else: IntWidth(pad)))

public defmethod pad-to (x:SIntValue, w:Int, pad:Int) -> Expression :
  if pad == -1: Pad(x,UnknownWidth()) else: if pad == 0: x else: SIntValue(value(x), IntWidth(pad))

public defmethod pad-to (x:UIntValue, w:Int, pad:Int) -> Expression :
  ;; println-all(["PAD-TO L " x " W " w " PAD " pad])
  if pad == -1: Pad(x,UnknownWidth()) else: if pad == 0: x else: UIntValue(value(x), IntWidth(pad))

public deftype Stmt
public defstruct DefWire <: Stmt :
   name: Symbol
   type: Type
public defstruct DefRegister <: Stmt :
   name: Symbol
   type: Type
public defstruct DefInstance <: Stmt :
   name: Symbol
   module: Expression
public defstruct DefCMemory <: Stmt :
   name: Symbol
   type: VectorType
public defstruct DefSMemory <: Stmt :
   name: Symbol
   type: VectorType
public defstruct DefNode <: Stmt :
   name: Symbol
   value: Expression
public defstruct DefAccessor <: Stmt :
   name: Symbol
   source: Expression
   index: Expression
public defstruct Conditionally <: Stmt :
   pred: Expression
   conseq: Stmt
   alt: Stmt
public defstruct Begin <: Stmt :
   body: List<Stmt>
public defstruct Connect <: Stmt :
   loc: Expression
   exp: Expression
public defstruct OnReset <: Stmt :
   loc: Expression
   exp: Expression
public defstruct EmptyStmt <: Stmt


public deftype Type
public defstruct FloType <: Type 
public defstruct UIntType <: Type :
   width: Width
public defstruct SIntType <: Type :
   width: Width
public defstruct BundleType <: Type :
   fields: List<Field>
public defstruct VectorType <: Type :
   type: Type
   size: Int
public defstruct UnknownType <: Type

public defstruct Field :
   name: Symbol
   flip: Flip
   type: Type

public defstruct Port :
   name: Symbol
   direction: Direction
   type: Type

public defstruct Module :
   name: Symbol
   ports: List<Port>
   body: Stmt

public defstruct Circuit :
   modules: List<Module>
   main: Symbol
