#use-syntax(core, chipper)

defpackage decoupled :
   import core
   import verse
   import chipper
   import stdlib

public defbundle ValidIO<T> :
  valid: Bool
  bits: T

public defn fired<?T> (d: ValidIO<?T>) -> Bool : d.valid

;; Adds a ready-valid handshaking protocol to any interface.
;;  The standard used is that the consumer uses the flipped
;;  interface.
public defbundle DecoupledIO<T> :
  valid: Bool
  bits: T
  flip ready: Bool

public defn fired<?T> (d: DecoupledIO<?T>) -> Bool : d.ready && d.valid
 
;; TODO entries as getter
public defmodule Fifo<T> (entries: Int, pipe: True|False, flow: True|False) : ;; , _reset: Bool = null
  input enq: DecoupledIO<T>
  output deq: DecoupledIO<T>
  output count: UInt<log2Up(entries + 1)>

  mem ram: T[entries]
  val enq-ptr = Counter(entries)
  val deq-ptr = Counter(entries)
  reg maybe-full : Bool maybe-full <- Bool(false)

  node ptr-match = value(enq-ptr) === value(deq-ptr)
  node empty = ptr-match && ! maybe-full
  node full = ptr-match && maybe-full
  node maybe-flow = Bool(flow) && empty
  node do-flow = maybe-flow && deq.ready

  node do-enq = enq.ready && enq.valid && ! do-flow
  node do-deq = deq.ready && deq.valid && ! do-flow
  when do-enq :
    ram[value(enq-ptr)] := enq.bits
    inc(enq-ptr)
  when do-deq :
    inc(deq-ptr)
  when do-enq !== do-deq :
    maybe-full := do-enq

  deq.valid := ! empty || Bool(flow) && enq.valid
  enq.ready := ! full || Bool(pipe) && deq.ready
  deq.bits  := mux(maybe-flow, enq.bits, ram[value(deq-ptr)])

  node ptr-diff = value(enq-ptr) - value(deq-ptr)
  if is-pow2(entries) :
    count := cat(maybe-full && ptr-match, ptr-diff)
  else :
    count := mux(ptr-match, mux(maybe-full, UInt(entries), UInt(0)), mux(value(deq-ptr) > value(enq-ptr), UInt(entries) + ptr-diff, ptr-diff))

;; Generic hardware queue. Required parameter entries controls
;;  the depth of the queues. The width of the queue is determined
;;  from the inputs.
;;
;;  Example usage:
;;    val q = new Fifo(UInt(), 16)
;;    q.io.enq <> producer.io.out
;;    consumer.io.in <> q.io.deq
public defn FifoOf<?T> (enq: DecoupledIO<?T & Data>) -> DecoupledIO<T> : FifoOf(enq, 2)
public defn FifoOf<?T> (enq: DecoupledIO<?T & Data>, entries: Int) -> DecoupledIO<T> : FifoOf(enq, entries, false)
public defn FifoOf<?T> (enq: DecoupledIO<?T & Data>, entries: Int, pipe: True|False) -> DecoupledIO<T> :
  inst q of Fifo(enq.bits, entries, pipe, false)
  q.enq.valid := enq.valid ;; not using <> so that override is allowed
  q.enq.bits  := enq.bits
  enq.ready   := q.enq.ready
  q.deq
