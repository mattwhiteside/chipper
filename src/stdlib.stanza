#use-syntax(core, chipper)

defpackage stdlib :
   import core
   import verse
   import utils
   import chipper

;;; MATH

public defn log2Up (in: Int) -> Int :
  if in == 1: 1 else: to-int(ceil(log(to-float(in)) / log(2.0)))

public defn log2Ceil (in: Int) -> Int :
  to-int(ceil(log(to-float(in)) / log(2.0)))

public defn log2Down (in: Int) -> Int :
  if in == 1: 1 else: to-int(floor(log(to-float(in)) / log(2.0)))

public defn log2Floor (in: Int) -> Int :
  to-int(floor(log(to-float(in)) / log(2.0)))

public defn is-pow2 (in: Int) -> True|False :
  in > 0 and ((in & (in - 1)) == 0)

public defn to-bools (in: Bits) -> Streamable<Bool> :
  stream({ in[_] }, 0 to width(in))

public defn fill-interleaved (n: Int, in: Bits) -> UInt :
  fill-interleaved(n, to-list(to-bools(in)))

;; todo Vec from elts
public defn fill-interleaved (n: Int, elts: Streamable<Bool> & Lengthable) -> UInt :
  wire r : Bool[n]
  for (e in elts, i in 0 to false) do : r[i] := e
  to-bits(r)

public defn slice<?T> (x:Streamable<?T>, start:Int, end:Int) -> Streamable<T> :
  select(x, stream(fn (i:Int): i >= start and i < end, (0 to false)))

;; Returns the number of bits set (i.e value is 1) in the input signal.
public defmulti pop-count (in) -> UInt
public defmethod pop-count (in: Streamable<Bool>) -> UInt : pop-count(to-list(in))
public defmethod pop-count (in: List<Bool>) -> UInt :
  if length(in) == 0 :
     UInt(0)
  else : if (length(in) == 1) :
     head(in)
  else :
     pop-count(slice(in, 0, length(in) / 2)) + pop-count(slice(in, length(in) / 2, length(in)))

public defmethod pop-count (in: Bits) -> UInt : pop-count(to-bools(in))

;; Builds a Mux tree out of the input signal vector using a one hot encoded
;; select signal. Returns the output of the Mux tree.
public defn Mux1H<?T> (sel: Streamable<Bool>, in: Streamable<?T&Data> & Lengthable) -> T :
  val sin = to-stream(in)
  if length(in) == 1 :
    next(sin)
  else :
    val masked = map(fn (s, i): mux(s, to-bits(i), UInt(0)), sel, in)
    from-bits(next(sin), reduce(bit-or, masked))

public defn Mux1H<?T> (in: Streamable<KeyValue<Bool,?T&Data>>) -> T :
  val [sel, data] = unzip(in)
  Mux1H(sel, data)

public defn Mux1H<?T> (sel: UInt, in: Streamable<?T & Data> & Lengthable) -> T :
  Mux1H(to-bools(sel), in)

public defn Mux1H (sel: UInt, in: UInt) -> Bool :
  bit-or-reduce(sel & in)

;; Builds a Mux tree under the assumption that multiple select signals
;; can be enabled. Priority is given to the first select signal.
;; 
;; Returns the output of the Mux tree.
public defn priority-mux<?T> (in: List<KeyValue<Bool,?T&Bits>>) -> T :
  if length(in) == 1 :
    value(head(in))
  else :
    mux(key(head(in)), value(head(in)), priority-mux(tail(in)))

public defn priority-mux<?T> (sel: Streamable<Bool>, in: Streamable<?T & Bits>) -> T :
  priority-mux(to-list(map(KeyValue, sel, in)))

public defn priority-mux<?T> (sel: Bits, in: Streamable<?T & Bits>) -> T :
  priority-mux(to-bools(sel), in)

public defn mux-lookup<?S,?T> (k: ?S & Bits, default: ?T & Data, mapping: Streamable<KeyValue<?S & Bits, ?T&Data>>) -> T :
   var res = default
   val kvs = reverse(to-list(mapping))
   for kv in kvs do :
     res = mux(key(kv) === k, value(kv), res)
   res

public defmulti fill (n:Int, x:UInt) -> UInt
public defmethod fill (n: Int, x: Bool) -> UInt :
  if n == 0 : UInt<0>(0)
  else : if n == 1 : x
  else : if n > 1 : UInt<n>(0) - to-uint(x)
  else : error("Fill requires nonnegative integer")

public defmethod fill (n: Int, y: UInt) -> UInt :
  if n == 0 : UInt<0>(0)
  else : if n == 1 : y
  else : if n > 1 :
    val p2 = Vector<UInt>()
    add(p2, y)
    for i in 1 to log2Up(n + 1) do :
      add(p2, cat(p2[i - 1], p2[i - 1]))
    cat(map({ p2[_] }, to-list(filter({ (n & (1 << _)) != 0 }, 0 to log2Up(n + 1)))))
  else :
    error("Fill requires nonnegative integer")
  ;;    case _ => throw new IllegalArgumentException(s"n (=$n) must be nonnegative integer.")

public defn mux-case<?T> (default: ?T & Data, mapping: Streamable<KeyValue<Bool, ?T & Data>>) -> T :
  ;; TODO: potentially order
  var res = default
  val kvs = reverse(to-list(mapping))
  for kv in kvs do :
    res = mux(key(kv), value(kv), res)
  res

public defn list-lookup<?T> (addr: UInt, _default: Streamable<?T&Data>, _mapping: Streamable<KeyValue<MInt, Streamable<?T&Data>>>) -> List<T> :
  val default = to-list(_default)
  val mapping = to-list(_mapping)
  val [keys, _values] = unzip(mapping)
  val values = map(to-list, _values)
  val matches = map(fn (key:MInt) : key === addr, keys)
  to-list(stream(fn (i:Int): mux-case(default[i], stream(KeyValue{_,_[i]}, matches, values)), 0 to length(default)))

public defn lookup<?T> (addr: UInt, default: ?T & Data, mapping: Streamable<KeyValue<MInt, ?T & Data>>) -> T :
  head(list-lookup(addr, list(default), stream(fn (m): KeyValue(key(m), list(value(m))), mapping)))

;; Litte/big bit endian convertion: reverse the order of the bits in a UInt.
public defn reverse (in: UInt, length: Int) -> UInt :
  if length == 1 :
    in
  else : if is-pow2(length) and length >= 8 and length <= 64 :
    ;; Do it in logarithmic time to speed up C++.  Neutral for real HW.
    defn* loop (shift: Int, res: UInt, mask: UInt) :
      val nmask = mask ^ (mask[length - shift - 1,0] << shift)
      val nres  = ((res >> shift) & mask) | ((res[length - shift - 1, 0] << shift) & ! mask)
      if shift > 0: loop(shift >> 1, nres, nmask) else: res
    loop(length >> 1, in, UInt<length>((BigInt(1) << length) - 1))
  else :
    val half = (1 << log2Up(length)) / 2
    cat(reverse(in[half - 1, 0], half), reverse(in[length - 1, half], length - half))

public defn reverse (in: UInt) -> UInt : reverse(in, width(in))

public defn reg-next<?T> (in: ?T & Data) -> T :
  val r = Reg(in)
  r := in
  r

public defn reg-enable<?T> (in: ?T & Data, en: Bool) -> T :
  val r = Reg(in)
  when en : r := in
  r

;; Returns the n-cycle delayed version of the input signal.
public defn shift-register<?T> (in: ?T & Data, n: Int) -> T : shift-register(in, n, Bool(true))
public defn shift-register<?T> (in: ?T & Data, n: Int, en: Bool) -> T :
  ;; The order of tests reflects the expected use cases.
  if n == 1 :
    reg-enable(in, en)
  else : if n != 0 :
    Reg(shift-register(in, n - 1, en))
  else :
    in

;; Returns the one hot encoding of the input UInt.
public defn UInt-to-OH (in: UInt) -> UInt : UInt-to-OH(in, -1)
public defn UInt-to-OH (in: UInt, width: Int) -> UInt :
  if width == -1 : UInt(1) << in
  else : (UInt(1) << in[log2Up(width) - 1,0])[width - 1, 0]

public defclass Counter
public defmulti inc (c: Counter) -> Bool
public defmulti num (c: Counter) -> Int
public defmulti value (c: Counter) -> UInt
public defn Counter (n: Int) :
  reg count : UInt<log2Up(n)> count <- UInt(0)
  new Counter :
    defmethod value (this) -> UInt : count
    defmethod num (this) -> Int : n
    defmethod inc (this) -> Bool :
      if n == 1 : Bool(true)
      else :
        node wrap = count === UInt(n - 1)
        count := mux(Bool(not is-pow2(n)) && wrap, UInt(0), count + UInt(1))
        wrap

public defn Counter (cond: Bool, n: Int) -> [UInt, Bool] :
  val c = Counter(n)
  var wrap: Bool = Bool(false)
  when cond : wrap = inc(c)
  [value(c), cond && wrap]

